<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__expr_8h_source" xml:lang="en-US">
<title>/Users/jammerkoi/6015/msdscript/msdscript/Expr.h</title>
<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//</emphasis>
2 <emphasis role="comment">//&#32;Created&#32;by&#32;Mack&#32;on&#32;1/18/23.</emphasis>
3 <emphasis role="comment">//</emphasis>
4 
5 <emphasis role="preprocessor">#ifndef&#32;EXPRESSIONSHW_EXPR_H</emphasis>
6 <emphasis role="preprocessor">#define&#32;EXPRESSIONSHW_EXPR_H</emphasis>
7 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
8 <emphasis role="comment">//caps</emphasis>
9 
10 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;{
11 
12 &#32;&#32;&#32;&#32;prec_none,&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;=&#32;0</emphasis>
13 &#32;&#32;&#32;&#32;prec_add,&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;=&#32;1</emphasis>
14 &#32;&#32;&#32;&#32;prec_mult&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;=&#32;2</emphasis>
15 }&#32;precedence_t;
16 
17 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_expr">Expr</link>&#32;{
18 
19 <emphasis role="keyword">public</emphasis>:
20 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;equals(<link linkend="_class_expr">Expr</link>&#32;*e)&#32;=&#32;0;&#32;<emphasis role="comment">//&#32;0&#32;means&#32;subclass&#32;must&#32;overwrite&#32;equals</emphasis>
21 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;interp()&#32;=&#32;0;
22 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;has_variable()&#32;=&#32;0;
23 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_class_expr">Expr</link>*&#32;subst(std::string&#32;variable,&#32;<link linkend="_class_expr">Expr</link>*&#32;expr)&#32;=&#32;0;
24 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;print(std::ostream&amp;&#32;stream)&#32;=&#32;0;
25 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_expr_1abe130f37bd185ec13c5113de16fc7bf7">to_string</link>();
26 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_expr_1a94393142ad5e0d1d67f937568d0d325a">pretty_print_to_string</link>();
27 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_expr_1ad196f223df20df6e8c9f11f0013191ef">pretty_print</link>(std::ostream&amp;stream);
28 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;pretty_print_at(std::ostream&amp;&#32;stream,&#32;precedence_t&#32;prec)=&#32;0;
29 
30 
31 
32 };
33 
34 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_num">Num</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_expr">Expr</link>&#32;{
35 <emphasis role="keyword">public</emphasis>:
36 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;val;
37 &#32;&#32;&#32;&#32;<link linkend="_class_num">Num</link>(<emphasis role="keywordtype">int</emphasis>&#32;val);
38 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_num_1a07f51df870e2a49e0ea88603c442a974">equals</link>(<link linkend="_class_expr">Expr</link>&#32;*n);
39 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_num_1a24f8a1c7ccad82bf7ed1080b59cda6dd">interp</link>();
40 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_num_1ad0ce114704933a1ebe4629848d3e2d6d">has_variable</link>();
41 &#32;&#32;&#32;&#32;<link linkend="_class_expr">Expr</link>*&#32;<link linkend="_class_num_1aa01c23928cd1956fcb379abb02fc1864">subst</link>(std::string&#32;variable,&#32;<link linkend="_class_expr">Expr</link>*&#32;expr);
42 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_num_1a27856ae7c15a69317a8e2900c04a6964">print</link>(std::ostream&amp;&#32;stream);
43 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_num_1afb48796143f3e51cb5b1520339ee0522">pretty_print_at</link>(std::ostream&amp;&#32;stream,&#32;precedence_t&#32;prec);
44 
45 };
46 
47 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_var">Var</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_expr">Expr</link>&#32;{
48 <emphasis role="keyword">public</emphasis>:
49 &#32;&#32;&#32;&#32;std::string&#32;val;
50 &#32;&#32;&#32;&#32;<link linkend="_class_var">Var</link>(std::string&#32;val);
51 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_var_1ad9ce0a9a73711a7294607821e1410171">equals</link>(<link linkend="_class_expr">Expr</link>&#32;*n)&#32;<emphasis role="keyword">override</emphasis>;
52 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_var_1ac6df55db7c2447d3090dd99ae247ae80">interp</link>();
53 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_var_1a6083356e4955e1edfb76b8432672c93e">has_variable</link>();
54 &#32;&#32;&#32;&#32;<link linkend="_class_expr">Expr</link>*&#32;<link linkend="_class_var_1a6ef68dd71aa26f457cf31f8e0e18175c">subst</link>(std::string&#32;variable,&#32;<link linkend="_class_expr">Expr</link>*&#32;expr);
55 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_var_1a2fece9cf25bfaf4e1632064babaf97ee">print</link>(std::ostream&amp;&#32;stream);
56 
57 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_var_1ab6700c4c0052abe648466bbcf6b51382">pretty_print_at</link>(std::ostream&amp;&#32;stream,&#32;precedence_t&#32;prec);
58 };
59 
60 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_add">Add</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_expr">Expr</link>&#32;{
61 <emphasis role="keyword">public</emphasis>:
62 &#32;&#32;&#32;&#32;<link linkend="_class_expr">Expr</link>&#32;*lhs;
63 &#32;&#32;&#32;&#32;<link linkend="_class_expr">Expr</link>&#32;*rhs;
64 &#32;&#32;&#32;&#32;<link linkend="_class_add">Add</link>(<link linkend="_class_expr">Expr</link>&#32;*lhs,&#32;<link linkend="_class_expr">Expr</link>&#32;*rhs);
65 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_add_1a5d92e11ff0afc75546a51ac79e8fd0f8">equals</link>(<link linkend="_class_expr">Expr</link>&#32;*n)&#32;<emphasis role="keyword">override</emphasis>;
66 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_add_1a63c445ae0ea8ecc0d0765378e630a06f">interp</link>();
67 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_add_1a882db0df18673599f4d1248e17fb24cb">has_variable</link>();
68 &#32;&#32;&#32;&#32;<link linkend="_class_expr">Expr</link>*&#32;<link linkend="_class_add_1abcc0fe43eb138643fc2505491120cc0d">subst</link>(std::string&#32;variable,&#32;<link linkend="_class_expr">Expr</link>*&#32;expr);
69 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_add_1a8ff08b38f4552717c52e6d181564c50e">print</link>(std::ostream&amp;&#32;stream);
70 
71 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_add_1ae9792aa106988bd9a05c165ea16affdd">pretty_print_at</link>(std::ostream&amp;&#32;stream,&#32;precedence_t&#32;prec);
72 };
73 
74 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_mult">Mult</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_expr">Expr</link>&#32;{
75 <emphasis role="keyword">public</emphasis>:
76 &#32;&#32;&#32;&#32;<link linkend="_class_expr">Expr</link>&#32;*lhs;
77 &#32;&#32;&#32;&#32;<link linkend="_class_expr">Expr</link>&#32;*rhs;
78 &#32;&#32;&#32;&#32;<link linkend="_class_mult">Mult</link>(<link linkend="_class_expr">Expr</link>&#32;*lhs,&#32;<link linkend="_class_expr">Expr</link>&#32;*rhs);
79 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_mult_1ac2fa5546caf388d4e9e6f0ed38087db0">equals</link>(<link linkend="_class_expr">Expr</link>&#32;*n)&#32;<emphasis role="keyword">override</emphasis>;
80 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_mult_1a7d3fba024174b294a7e1c145485b9d38">interp</link>();
81 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_mult_1ab53cc8634d4ebad5aaa2dc818c0de598">has_variable</link>();
82 &#32;&#32;&#32;&#32;<link linkend="_class_expr">Expr</link>*&#32;<link linkend="_class_mult_1a815b8a865e65aaf706824aa9654c874e">subst</link>(std::string&#32;variable,&#32;<link linkend="_class_expr">Expr</link>*&#32;expr);
83 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_mult_1af0dc03633da9d7d8dc7d6c8b4762afc7">print</link>(std::ostream&amp;&#32;stream);
84 
85 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_mult_1a7a1da192b2fbe109b93e619acd713b06">pretty_print_at</link>(std::ostream&amp;&#32;stream,&#32;precedence_t&#32;prec);
86 
87 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;no_parentheses(std::ostream&#32;&amp;stream);
88 };
89 
90 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//EXPRESSIONSHW_EXPR_H</emphasis>
</programlisting></section>
